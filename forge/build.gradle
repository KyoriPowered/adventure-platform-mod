plugins {
    alias(libs.plugins.forgeGradle)
    alias(libs.plugins.indra.publishing)
    id 'eclipse'
}

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

configurations {
    library
    implementation.extendsFrom library
}

def datagenResourcesDir = file("src/generated/resources")
minecraft {
  mappings channel: 'official', version: libs.versions.minecraft.get()
  accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
  
  runs.configureEach {
    workingDirectory project.file('run')
    property 'forge.logging.markers', 'REGISTRIES'
    property 'forge.logging.console.level', 'debug'
    property 'forge.enabledGameTestNamespaces', 'adventure_platform_forge'
    mods {
      adventure_platform_forge {
        source sourceSets.main
        source project(':adventure-platform-mod-shared').sourceSets.main
      }
    }
    lazyToken('minecraft_classpath') {
        configurations.library.copyRecursive().resolve().collect { it.absolutePath }.join(File.pathSeparator)
    }
  }
  runs {
      client
      server
      gameTestServer
      data {
          args '--mod', 'adventure_platform_forge', '--all', '--output', datagenResourcesDir, '--existing', datagenResourcesDir
      }
  }
}

sourceSets.main.resources { srcDir datagenResourcesDir }

repositories {
  mavenLocal()
  mavenCentral()
}

dependencies {
  minecraft libs.forge
  compileOnly(project(":adventure-platform-mod-shared")) {
    exclude group: 'net.minecraft'
  }

  /*implementation fg.deobf(group: 'com.google.code.gson', name: 'gson', version: '[2.0,3.0)')
  jarJar fg.deobf(group: 'com.google.code.gson', name: 'gson', version: '[2.0,3.0)') {
      jarJar.pin(it, "2.8.0")
  }*/
}

tasks.jar {
  manifest {
    attributes([
      "Specification-Title"     : "adventure",
      "Specification-Vendor"    : "KyoriPowered",
      "Specification-Version"   : libs.versions.adventure.get(),
      "Implementation-Title"    : project.name,
      "Implementation-Version"  : project.jar.archiveVersion,
      "Implementation-Vendor"   : "KyoriPowered"
    ])
  }
  from project(':adventure-platform-mod-shared').sourceSets.main.output
}

tasks.sourcesJar {
  from project(':adventure-platform-mod-shared').sourceSets.main.allSource
}

jar.finalizedBy('reobfJar')

publishing {
  publications {
    maven(MavenPublication) {
      jarJar.component(it)
    }
  }
}
